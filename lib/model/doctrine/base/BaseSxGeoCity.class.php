<?php

/**
 * BaseSxGeoCity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $region_id
 * @property integer $area_id
 * @property string $name
 * @property string $name_en
 * @property string $address
 * @property decimal $lat
 * @property decimal $lon
 * @property string $okato
 * @property boolean $public
 * @property boolean $public_active
 * @property Area $Area
 * @property Doctrine_Collection $Device
 * @property CitySetting $Cities
 * @property Doctrine_Collection $Service
 * @property Doctrine_Collection $Girl
 * 
 * @method integer             getRegionId()      Returns the current record's "region_id" value
 * @method integer             getAreaId()        Returns the current record's "area_id" value
 * @method string              getName()          Returns the current record's "name" value
 * @method string              getNameEn()        Returns the current record's "name_en" value
 * @method string              getAddress()       Returns the current record's "address" value
 * @method decimal             getLat()           Returns the current record's "lat" value
 * @method decimal             getLon()           Returns the current record's "lon" value
 * @method string              getOkato()         Returns the current record's "okato" value
 * @method boolean             getPublic()        Returns the current record's "public" value
 * @method boolean             getPublicActive()  Returns the current record's "public_active" value
 * @method Area                getArea()          Returns the current record's "Area" value
 * @method Doctrine_Collection getDevice()        Returns the current record's "Device" collection
 * @method CitySetting         getCities()        Returns the current record's "Cities" value
 * @method Doctrine_Collection getService()       Returns the current record's "Service" collection
 * @method Doctrine_Collection getGirl()          Returns the current record's "Girl" collection
 * @method SxGeoCity           setRegionId()      Sets the current record's "region_id" value
 * @method SxGeoCity           setAreaId()        Sets the current record's "area_id" value
 * @method SxGeoCity           setName()          Sets the current record's "name" value
 * @method SxGeoCity           setNameEn()        Sets the current record's "name_en" value
 * @method SxGeoCity           setAddress()       Sets the current record's "address" value
 * @method SxGeoCity           setLat()           Sets the current record's "lat" value
 * @method SxGeoCity           setLon()           Sets the current record's "lon" value
 * @method SxGeoCity           setOkato()         Sets the current record's "okato" value
 * @method SxGeoCity           setPublic()        Sets the current record's "public" value
 * @method SxGeoCity           setPublicActive()  Sets the current record's "public_active" value
 * @method SxGeoCity           setArea()          Sets the current record's "Area" value
 * @method SxGeoCity           setDevice()        Sets the current record's "Device" collection
 * @method SxGeoCity           setCities()        Sets the current record's "Cities" value
 * @method SxGeoCity           setService()       Sets the current record's "Service" collection
 * @method SxGeoCity           setGirl()          Sets the current record's "Girl" collection
 * 
 * @package    erotic-massage-egostudio
 * @subpackage model
 * @author     Vasilisa the Wise
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSxGeoCity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sx_geo_city');
        $this->hasColumn('region_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('area_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('name_en', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('lat', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => 7,
             'length' => 10,
             ));
        $this->hasColumn('lon', 'decimal', 10, array(
             'type' => 'decimal',
             'scale' => 7,
             'length' => 10,
             ));
        $this->hasColumn('okato', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('public', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('public_active', 'boolean', null, array(
             'type' => 'boolean',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Area', array(
             'local' => 'area_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Device', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasOne('CitySetting as Cities', array(
             'local' => 'id',
             'foreign' => 'setting_id'));

        $this->hasMany('Service', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('Girl', array(
             'local' => 'id',
             'foreign' => 'city_id'));
    }
}